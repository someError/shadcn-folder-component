#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

function getTsConfigPaths() {
  try {
    const tsconfigPath = path.join(process.cwd(), 'tsconfig.json');
    
    if (!fs.existsSync(tsconfigPath)) {
      return null;
    }

    const tsconfig = JSON.parse(fs.readFileSync(tsconfigPath, 'utf8'));
    return tsconfig.compilerOptions?.paths || null;
  } catch (error) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å tsconfig.json:', error.message);
    return null;
  }
}

function resolveAlias(aliasPath) {
  // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∏–∑ tsconfig.json
  const tsconfigPaths = getTsConfigPaths();
  
  if (aliasPath.startsWith('@/')) {
    let basePath = 'src'; // –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å tsconfig —Å –∞–ª–∏–∞—Å–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (tsconfigPaths && tsconfigPaths['@/*']) {
      const aliasMapping = tsconfigPaths['@/*'][0]; // –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø—É—Ç—å
      basePath = aliasMapping.replace('/*', ''); // —É–±–∏—Ä–∞–µ–º /*
    }
    
    // –ó–∞–º–µ–Ω—è–µ–º @/ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å
    const relativePath = aliasPath.substring(2); // —É–±–∏—Ä–∞–µ–º @/
    return path.join(process.cwd(), basePath, relativePath);
  }
  
  // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º
  if (!path.isAbsolute(aliasPath)) {
    return path.join(process.cwd(), aliasPath);
  }
  
  return aliasPath;
}

function getUiPathFromConfig() {
  try {
    // –ß–∏—Ç–∞–µ–º components.json
    const configPath = path.join(process.cwd(), 'components.json');
    
    if (!fs.existsSync(configPath)) {
      throw new Error('components.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–ª–∏–∞—Å –¥–ª—è ui –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const uiAlias = config.aliases?.ui;
    
    if (!uiAlias) {
      throw new Error('–ê–ª–∏–∞—Å ui –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ components.json');
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–ª–∏–∞—Å –≤ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å —Å —É—á–µ—Ç–æ–º tsconfig
    const uiPath = resolveAlias(uiAlias);
    
    console.log(`üîç –†–∞–∑—Ä–µ—à–µ–Ω –∞–ª–∏–∞—Å "${uiAlias}" -> "${path.relative(process.cwd(), uiPath)}"`);
    
    return uiPath;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: src/components/ui');
    return path.join(process.cwd(), 'src', 'components', 'ui');
  }
}

async function restructureComponent(componentName, uiPath) {
  console.log(uiPath)
  try {
    const componentFile = path.join(uiPath, `${componentName}.tsx`);
    const componentDir = path.join(uiPath, componentName);
    const indexFile = path.join(componentDir, 'index.tsx');

    if (!fs.existsSync(componentFile)) {
      console.log(`‚ö†Ô∏è ${componentName}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      return false;
    }

    const content = fs.readFileSync(componentFile, 'utf8');
    fs.mkdirSync(componentDir, { recursive: true });
    fs.writeFileSync(indexFile, content);
    fs.unlinkSync(componentFile);

    console.log(`‚úÖ ${componentName}: —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω`);
    console.log(`   üìÅ ${path.relative(process.cwd(), indexFile)}`);
    return true;
  } catch (error) {
    console.error(`‚ùå ${componentName}: –æ—à–∏–±–∫–∞ - ${error.message}`);
    return false;
  }
}

async function main() {
  const args = process.argv.slice(2);

  const noInstall = args.includes('--no-install');
  const components = args.filter(arg => !arg.startsWith('--'));
  
  if (components.length === 0) {
    console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç');
    process.exit(1);
  }

  try {
    const uiPath = getUiPathFromConfig();
    console.log(uiPath)
    console.log(`üìÅ UI –ø—É—Ç—å: ${path.relative(process.cwd(), uiPath)}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ components.json
    if (!fs.existsSync(path.join(process.cwd(), 'components.json'))) {
      console.log('‚ö†Ô∏è components.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º shadcn/ui');
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
    if (!noInstall) {
      for (const component of components) {
        try {
          console.log(`üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ${component}...`);
          execSync(`npx shadcn@latest add ${component}`, { stdio: 'inherit' });
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ${component}:`, error.message);
        }
      }
    }

    // –†–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    console.log('\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ...');
    let successCount = 0;
    
    for (const component of components) {
      const success = await restructureComponent(component, uiPath);
      if (success) successCount++;
    }

    console.log(`\nüéâ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${successCount}/${components.length}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

main().catch(console.error); 